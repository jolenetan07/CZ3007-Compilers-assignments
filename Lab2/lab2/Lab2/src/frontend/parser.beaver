// package the generated Java class lives in; no need to change this
%package "parser";

// name of the generated Java class; no need to change this
%class "Parser";

// no need to change this either
%embed {:
	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}
:};

// the list of all terminals; no need to change this
%terminals MODULE, INT, VOID, IF, ELSE, WHILE, RETURN, BREAK, BOOLEAN, PUBLIC, TRUE, FALSE,
           INT_LITERAL, STRING_LITERAL, ID, TYPE, IMPORT,
           PLUS, MINUS, TIMES, DIV, MOD, EQEQ, NEQ, LEQ, GEQ, LT, GT,
           LBRACKET, RPAREN, COMMA, RCURLY, LCURLY, SEMICOLON, RBRACKET, LPAREN, EQL;
           
// declaration of start symbol; no need to change this
%goal Module;

// temporary declaration, you can remove this once you have written all other rules
%goal Dummy;

/* TODO: Flesh out the rule for Module, and add rules for other nonterminals. Here is an example
         of a rule you may want to add:
         
   Accessibility = PUBLIC
		  |
		  ;
  */

Module = MODULE ID LCURLY Imports Declarations RCURLY;

Imports = Import Imports
	  |
	  ;

Import = IMPORT ID SEMICOLON;

Declarations = Declaration Declarations
		 |
		 ;

Declaration = FunctionDeclaration
		| FieldDeclaration
		| TypeDeclaration
		;

FunctionDeclaration = AccessibilitySpecifier TypeName ID LPAREN ParameterList RPAREN LCURLY StatementList RCURLY;

FieldDeclaration =  AccessibilitySpecifier TypeName ID SEMICOLON;

TypeDeclaration = AccessibilitySpecifier TYPE ID EQL STRING_LITERAL SEMICOLON;

AccessibilitySpecifier = PUBLIC
			     |
			     ;

TypeName = PrimitiveType
	   | ArrayType
	   | ID
	   ;

PrimitiveType = VOID
		  | BOOLEAN
		  | INT
		  ;

ArrayType = PrimitiveType LBRACKET RBRACKET
	    | ArrayType LBRACKET RBRACKET
	    | ID LBRACKET RBRACKET
	    ;

ParameterList = NonEmptyParameterList 
		  |
		  ;

NonEmptyParameterList = Parameter COMMA NonEmptyParameterList
			    | Parameter
			    ;

Parameter = TypeName ID;

Statement = VariableDeclaration
	    | StatementBlock
	    | IfStatement
	    | WhileStatement
	    | BreakStatement
	    | ReturnStatement
	    | ExpressionStatement
	    ;

VariableDeclaration = TypeName ID SEMICOLON;

StatementBlock = LCURLY StatementList RCURLY;

StatementList = Statement StatementList
		  |
		  ;

IfStatement = IF LPAREN Expression RPAREN Statement ElseStatement;

ElseStatement = ELSE Statement
		  |
		  ;

WhileStatement = WHILE LPAREN Expression RPAREN Statement;

BreakStatement = BREAK SEMICOLON;

ReturnStatement = RETURN OptionalExpression SEMICOLON;

OptionalExpression = Expression
			 |
			 ;

ExpressionStatement = Expression SEMICOLON;

Expression = Assignment
	     | RHSExpression
	     ;

Assignment = LHSExpression EQL Expression;

LHSExpression = ID
		  | ArrayAccess
		  ;

ArrayAccess = ID LBRACKET Expression RBRACKET
		| ArrayAccess LBRACKET Expression RBRACKET
		;

RHSExpression = ArithmeticExpression RHSExpressionTail;

RHSExpressionTail = ComparisonOperator ArithmeticExpression
			| 
			;

ComparisonOperator = EQEQ
			 | NEQ
			 | LT
			 | LEQ
			 | GT
			 | GEQ
			 ;

ArithmeticExpression = ArithmeticExpression AdditiveOperator Term
			   | Term 
			   ;

AdditiveOperator = PLUS
		     | MINUS 
		     ;

Term = Term MultiplicativeOperator Factor
     | Factor
     ;

MultiplicativeOperator = TIMES
			     | DIV
			     | MOD
			     ;

Factor = MINUS Factor
	 | PrimaryExpression
	 ;

PrimaryExpression = LHSExpression
			| FunctionCall
			| ArrayExpression
			| STRING_LITERAL
			| INT_LITERAL
			| BooleanLiteral
			| ParenthesisExpression
			;

FunctionCall = ID LPAREN ExpressionList RPAREN;

ExpressionList = NonEmptyExpressionList
		   | 
		   ;

NonEmptyExpressionList = Expression COMMA NonEmptyExpressionList
			     | Expression
			     ;

ArrayExpression = LBRACKET NonEmptyExpressionList RBRACKET;

BooleanLiteral = TRUE
		   | FALSE
		   ;

ParenthesisExpression = LPAREN Expression RPAREN;

/**/

/* Dummy rule to make the lexer compile. Remove this once you have written all other rules. */	  
Dummy = MODULE INT VOID IF ELSE WHILE RETURN BREAK BOOLEAN PUBLIC TRUE FALSE INT_LITERAL STRING_LITERAL ID TYPE IMPORT
           PLUS MINUS TIMES DIV MOD EQEQ NEQ LEQ GEQ LT GT LBRACKET RPAREN COMMA RCURLY LCURLY SEMICOLON RBRACKET LPAREN EQL;