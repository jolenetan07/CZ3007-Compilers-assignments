package parser;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short ID = 1;
		static public final short LBRACKET = 2;
		static public final short LPAREN = 3;
		static public final short MINUS = 4;
		static public final short STRING_LITERAL = 5;
		static public final short INT_LITERAL = 6;
		static public final short TRUE = 7;
		static public final short FALSE = 8;
		static public final short RPAREN = 9;
		static public final short RCURLY = 10;
		static public final short VOID = 11;
		static public final short BOOLEAN = 12;
		static public final short INT = 13;
		static public final short LCURLY = 14;
		static public final short SEMICOLON = 15;
		static public final short RBRACKET = 16;
		static public final short IF = 17;
		static public final short WHILE = 18;
		static public final short BREAK = 19;
		static public final short RETURN = 20;
		static public final short EQL = 21;
		static public final short IMPORT = 22;
		static public final short PUBLIC = 23;
		static public final short COMMA = 24;
		static public final short PLUS = 25;
		static public final short TIMES = 26;
		static public final short DIV = 27;
		static public final short MOD = 28;
		static public final short TYPE = 29;
		static public final short MODULE = 30;
		static public final short ELSE = 31;
		static public final short EQEQ = 32;
		static public final short NEQ = 33;
		static public final short LT = 34;
		static public final short LEQ = 35;
		static public final short GT = 36;
		static public final short GEQ = 37;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pLLcbKLLKK$ju5r4SOKA9YPKO80W8Y4e8CZq44cKihQBP1qz86jT9ASCnI53MpFwtwaKq" +
		"qcvLDPfbb3cMp3PPbPfFcb9Mv##vzXyVrldVVyorNQzLxwpjxxxE$lSzuppc0reP6vE9ibA" +
		"4S5QX2DSv5Fcx0OEJWT4p4JUYEdeX5Bvo2Kt4QUgDRq14zWeuuCs14aYKY4Bz$aFmC2tyAB" +
		"i3bACLmLE8oZ88cd#4st8vfY9FbyYVw8XK3CSYBrzB1GyWnyiR1PSihGAY7rugnjhnQNENf" +
		"ts#OPCUJFRZPmzkDEHwUh$cvs9YVHWopU0hHMNRWQZynqqKmsYko21VwYQcnzFHnd6YipAK" +
		"#On9LtxmzwRQUismzURQUEblF25lF5G6oMKQAcVeuvIz4OZQolBpkrJe99wCPCt2hbp#GFI" +
		"uW8mRduNmqOAniLLeVnECQN8lnc83hSBrNH8bbPQt#eG7ynsjtTSyPEY4CNR20TZXEG0ISd" +
		"C4kE0C9ofxDEMjICnYDADc9VcwBUtyglvY5I67q7KZ6NAHX03AHZI7y6ejHZtCmal8YN8bB" +
		"C0OtoXEOZ5la1$aUit0dvd4bxi8YpCTYwBzMjfd8x4dCbSBJ9vNvqfanWrzN9h#lBEw#R6F" +
		"rSzb27lT2mNyouj$cEw0XX6TQ6DUkCzUgjrgfhlpQwwX76pkzcnUlXuddE4PUA4ySEruD$U" +
		"syxZpvxNYwrT6kPilJRLyy#$dnvGdd3Yxq4zEJEwtMXzzVZBMdJhKo$cB#dnxhIDtZ36UzW" +
		"sUhrUjUBIVNQnZFgIYVA#hF3Wt825VlYLYFfk$SFZoVulZYYUVTQusmZYrO$$7QBZLdfJpX" +
		"otYAktX#wsTkAPbbdCCGPJkCENFFO1LhdVoxBNV64hwgXf9VpRUKxetaFuPVOp7dMIDqwUH" +
		"krZrEwb561dsTmgZ76EiLAVpnsmIMD1b7B4zkO0MndbX7B0CS$28ScTJRADVel7O0sdZMRQ" +
		"2SGaoYleNOHCSYIb4vbzCNQewpWlveOfJYhwBkLFKJc6SRvMGQpAkDKPpjoZ#N$fsKCsaSL" +
		"7NJtDAnMjbDbhQcqhTRSVOJXwYiPRrkxw6CLRmaVttko8TTvEOGCrGSnwuL4RDK6mTyZBU2" +
		"cAFqPgBUucyW5gZuIkgjgdvnuFveyrI$zB7CL$eHwYtAFvqvD$k8MyhwNiH6wlSGzwlsGwc" +
		"h$Q4zG2maxYEMcMBlLl91ubxJtDIREF54dCbEzkw3m#mVqAvpasurwVi2pS7HEH5XQIDJrV" +
		"Tb6$bAppVvNQfkf2MkshuDHwEAuNx4NkQjOrsaaeVLU2Biudta6ssn9tResWWVOnGBFzPYD" +
		"vkuEuwr7q7qjyMFRsdm#RGI7sDS0lMJlsMl8LdA7t98VeVb9mUDyblPBj$8rx9Dlf8lZPel" +
		"ZF9p3#zZ#PJb9nxx8#93uWDYYxmdcsKbjKto3iktYTU9LuWNv7bPAS$92dbMdf6dvIdPQCI" +
		"$AniCkLvMoqkoIbwKbmtxKNcCPPiyB0yPzYD6#IJnchmgw#GjMIjloXkoXZNl6xwVZF97FQ" +
		"$iab$b5$dPDBxlZFA0nzul#pWhHmpzC8i6llGwyOxG2F2U2E7zeX7W7UFme88tmd3UJPNak" +
		"cYxwC#aRCSW4xAOenrLjAl8BQTURjnK6b#X3bjaapUOA22lW74vRA#QUZNrNDv7GwZd6GZX" +
		"#rNZMyDX88Ds8gMEVkod3lqDCf3rDPI#a4vVEcMHGXhjDCfY4nBOHW9baXyaiwrQobhsiP0" +
		"v2gcdKAOI$QdhgFy7M4H$xm==");

	static final Action RETURN6 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 6];
		}
	};

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN9 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 9];
		}
	};

	static final Action RETURN4 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 4];
		}
	};

	static final Action RETURN5 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 5];
		}
	};

	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			RETURN6,	// [0] Module = MODULE ID LCURLY Imports Declarations RCURLY; returns 'RCURLY' although none is marked
			RETURN2,	// [1] Imports = Import Imports; returns 'Imports' although none is marked
			Action.NONE,  	// [2] Imports = 
			RETURN3,	// [3] Import = IMPORT ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [4] Declarations = Declaration Declarations; returns 'Declarations' although none is marked
			Action.NONE,  	// [5] Declarations = 
			Action.RETURN,	// [6] Declaration = FuncDeclaration
			Action.RETURN,	// [7] Declaration = FieldDeclaration
			Action.RETURN,	// [8] Declaration = TypeDeclaration
			RETURN9,	// [9] FuncDeclaration = AccessibilitySpecifier TypeName ID LPAREN ParameterList RPAREN LCURLY StatementList RCURLY; returns 'RCURLY' although none is marked
			RETURN4,	// [10] FieldDeclaration = AccessibilitySpecifier TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN6,	// [11] TypeDeclaration = AccessibilitySpecifier TYPE ID EQL STRING_LITERAL SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [12] AccessibilitySpecifier = PUBLIC
			Action.NONE,  	// [13] AccessibilitySpecifier = 
			Action.RETURN,	// [14] TypeName = PrimitiveType
			Action.RETURN,	// [15] TypeName = ArrayType
			Action.RETURN,	// [16] TypeName = ID
			Action.RETURN,	// [17] PrimitiveType = VOID
			Action.RETURN,	// [18] PrimitiveType = BOOLEAN
			Action.RETURN,	// [19] PrimitiveType = INT
			RETURN3,	// [20] ArrayType = PrimitiveType LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [21] ArrayType = ArrayType LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [22] ArrayType = ID LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [23] ParameterList = NonEmptyParameterList
			Action.NONE,  	// [24] ParameterList = 
			RETURN3,	// [25] NonEmptyParameterList = Parameter COMMA NonEmptyParameterList; returns 'NonEmptyParameterList' although none is marked
			Action.RETURN,	// [26] NonEmptyParameterList = Parameter
			RETURN2,	// [27] Parameter = TypeName ID; returns 'ID' although none is marked
			Action.RETURN,	// [28] Statement = LocalVariableDeclaration
			Action.RETURN,	// [29] Statement = BlockStatement
			Action.RETURN,	// [30] Statement = IfStatement
			Action.RETURN,	// [31] Statement = WhileStatement
			Action.RETURN,	// [32] Statement = BreakStatement
			Action.RETURN,	// [33] Statement = ReturnStatement
			Action.RETURN,	// [34] Statement = ExpressionStatement
			RETURN3,	// [35] LocalVariableDeclaration = TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [36] BlockStatement = LCURLY StatementList RCURLY; returns 'RCURLY' although none is marked
			RETURN2,	// [37] StatementList = Statement StatementList; returns 'StatementList' although none is marked
			Action.NONE,  	// [38] StatementList = 
			RETURN6,	// [39] IfStatement = IF LPAREN Expression RPAREN Statement Else; returns 'Else' although none is marked
			RETURN2,	// [40] Else = ELSE Statement; returns 'Statement' although none is marked
			Action.NONE,  	// [41] Else = 
			RETURN5,	// [42] WhileStatement = WHILE LPAREN Expression RPAREN Statement; returns 'Statement' although none is marked
			RETURN2,	// [43] BreakStatement = BREAK SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [44] ReturnStatement = RETURN SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [45] ReturnStatement = RETURN Expression SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [46] ExpressionStatement = Expression SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [47] Expression = Assignment
			Action.RETURN,	// [48] Expression = RHSExpression
			RETURN3,	// [49] Assignment = LHSExpression EQL Expression; returns 'Expression' although none is marked
			Action.RETURN,	// [50] LHSExpression = ID
			Action.RETURN,	// [51] LHSExpression = ArrayAccess
			RETURN4,	// [52] ArrayAccess = ID LBRACKET Expression RBRACKET; returns 'RBRACKET' although none is marked
			RETURN4,	// [53] ArrayAccess = ArrayAccess LBRACKET Expression RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [54] RHSExpression = ArithmeticExpression
			RETURN3,	// [55] RHSExpression = ArithmeticExpression ComparisonOperator ArithmeticExpression; returns 'ArithmeticExpression' although none is marked
			Action.RETURN,	// [56] ComparisonOperator = EQEQ
			Action.RETURN,	// [57] ComparisonOperator = NEQ
			Action.RETURN,	// [58] ComparisonOperator = LT
			Action.RETURN,	// [59] ComparisonOperator = LEQ
			Action.RETURN,	// [60] ComparisonOperator = GT
			Action.RETURN,	// [61] ComparisonOperator = GEQ
			new Action() {	// [62] ArithmeticExpression = ArithmeticExpression ArithmeticOperator Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [63] ArithmeticExpression = Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [64] ArithmeticOperator = PLUS
			Action.RETURN,	// [65] ArithmeticOperator = MINUS
			new Action() {	// [66] Term = Term MultiplicativeOperator Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [67] Term = Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [68] MultiplicativeOperator = TIMES
			Action.RETURN,	// [69] MultiplicativeOperator = DIV
			Action.RETURN,	// [70] MultiplicativeOperator = MOD
			RETURN2,	// [71] Factor = MINUS Factor; returns 'Factor' although none is marked
			Action.RETURN,	// [72] Factor = PrimaryExpression
			Action.RETURN,	// [73] PrimaryExpression = LHSExpression
			Action.RETURN,	// [74] PrimaryExpression = FunctionCall
			Action.RETURN,	// [75] PrimaryExpression = ArrayExpression
			Action.RETURN,	// [76] PrimaryExpression = STRING_LITERAL
			Action.RETURN,	// [77] PrimaryExpression = INT_LITERAL
			Action.RETURN,	// [78] PrimaryExpression = Boolean
			Action.RETURN,	// [79] PrimaryExpression = ParenthesizedExpression
			RETURN4,	// [80] FunctionCall = ID LPAREN ExpressionLists RPAREN; returns 'RPAREN' although none is marked
			Action.RETURN,	// [81] ExpressionLists = NonEmptyExpressionList
			Action.NONE,  	// [82] ExpressionLists = 
			RETURN3,	// [83] NonEmptyExpressionList = Expression COMMA NonEmptyExpressionList; returns 'NonEmptyExpressionList' although none is marked
			Action.RETURN,	// [84] NonEmptyExpressionList = Expression
			RETURN3,	// [85] ArrayExpression = LBRACKET NonEmptyExpressionList RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [86] ParenthesizedExpression = LPAREN Expression RPAREN; returns 'RPAREN' although none is marked
			Action.RETURN,	// [87] Boolean = TRUE
			Action.RETURN	// [88] Boolean = FALSE
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
